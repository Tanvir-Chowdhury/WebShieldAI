# @app.get("/cdn/webshield-xss-agent.js")
# def serve_xss_agent(request: Request, db: Session = Depends(get_db)):
#     website_id = request.query_params.get("wid", "0")
#     client_ip = request.headers.get("X-Envoy-External-Address")
#     if not client_ip:
#       client_ip = request.headers.get("X-Forwarded-For") or request.headers.get("X-Real-IP")
#     if not client_ip:
#       client_ip = request.client.host

#     new_log = models.XSSLog(
#         website_id=website_id,
#         ip_address=client_ip
#     )
#     db.add(new_log)
#     db.commit()
    
#     # site = (
#     #     db.query(models.Website)
#     #     .filter(models.Website.id == website_id, models.Website.user_id == current_user.id)
#     #     .first()
#     # )
#     # if not site:
#     #     raise HTTPException(404, detail="Website not found")
    
    
#     site = db.query(models.Website).filter(models.Website.id == website_id).first()
#     if not site:
#         raise HTTPException(404, detail="Website not found")
    
#     user = db.query(models.User).filter(models.User.id == site.user_id).first()
#     if not user or not user.email:
#         raise HTTPException(404, detail="Owner email not found")
    
#     website_name = site.name
#     website_url = site.url
#     owner_email = user.email
#     # website_name, website_url, owner_email = get_site_primitives(db, website_id, current_user.id)
#     ts = datetime.utcnow()
    
#     subject = f"[Web Shield AI] XSS attempt on {website_name}"
#     html = build_threat_email_html(
#         website_name=website_name, website_url=website_url,
#         log_type="xss", occurred_at=ts, ip_address=client_ip
#     )
#     try:
#         send_email_now(owner_email, subject, html)
#     except Exception as e:
#         print("Email send error:", e)
    
  
#     js_code = """
# (function () {{
#   const suspiciousPatterns = [
#     /<script.*?>.*?<\\/script>/i,
#     /%3C\s*script.*?%3E.*?%3C\s*\/\s*script\s*%3E/i,
#     /javascript:/i,
#     /onerror\\s*=\\s*/i,
#     /onload\\s*=\\s*/i,
#     /<.*?on\\w+\\s*=\\s*['"].*?['"].*?>/i,
#     /document\\.cookie/i,
#     /<iframe/i,
#     /<img.*?src=.*?>/i
#   ];

#   function isMalicious(value) {{
#     return suspiciousPatterns.some(pattern => pattern.test(value));
#   }}

#   function checkInputsAndAlert() {{
#     const inputs = document.querySelectorAll("input[type='text'], textarea");

#     for (let input of inputs) {{
#       const value = input.value.trim();
#       if (value && isMalicious(value)) {{
#         alert("Script Injection Detected in input!");
#         window.location.href = "/";
#         return true;
#       }}
#     }}
#     return false;
#   }}

#   function checkURLParams() {{
#     const params = new URLSearchParams(window.location.search);
#     for (let [key, value] of params.entries()) {{
#       if (value && isMalicious(decodeURIComponent(value))) {{
#         alert("Script Injection Detected in URL!");
#         window.location.href = "/";
#         return true;
#       }}
#     }}
#     return false;
#   }}

#   // Run on page load
#   document.addEventListener("DOMContentLoaded", function () {{
#     if (checkInputsAndAlert()) return;
#     if (checkURLParams()) return;

#     // Re-check on form submit
#     const forms = document.querySelectorAll("form");
#     for (let form of forms) {{
#       form.addEventListener("submit", function (e) {{
#         if (checkInputsAndAlert()) {{
#           e.preventDefault();
#         }}
#       }});
#     }}
#   }});
 
#   console.log("WebShield XSS Agent Activated");
# }})();
# """
#     return Response(content=js_code, media_type="application/javascript")